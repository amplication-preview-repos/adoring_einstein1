/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  AlbumPhoto as PrismaAlbumPhoto,
  Album as PrismaAlbum,
  Photo as PrismaPhoto,
} from "@prisma/client";

export class AlbumPhotoServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AlbumPhotoCountArgs, "select">
  ): Promise<number> {
    return this.prisma.albumPhoto.count(args);
  }

  async albumPhotos(
    args: Prisma.AlbumPhotoFindManyArgs
  ): Promise<PrismaAlbumPhoto[]> {
    return this.prisma.albumPhoto.findMany(args);
  }
  async albumPhoto(
    args: Prisma.AlbumPhotoFindUniqueArgs
  ): Promise<PrismaAlbumPhoto | null> {
    return this.prisma.albumPhoto.findUnique(args);
  }
  async createAlbumPhoto(
    args: Prisma.AlbumPhotoCreateArgs
  ): Promise<PrismaAlbumPhoto> {
    return this.prisma.albumPhoto.create(args);
  }
  async updateAlbumPhoto(
    args: Prisma.AlbumPhotoUpdateArgs
  ): Promise<PrismaAlbumPhoto> {
    return this.prisma.albumPhoto.update(args);
  }
  async deleteAlbumPhoto(
    args: Prisma.AlbumPhotoDeleteArgs
  ): Promise<PrismaAlbumPhoto> {
    return this.prisma.albumPhoto.delete(args);
  }

  async getAlbum(parentId: string): Promise<PrismaAlbum | null> {
    return this.prisma.albumPhoto
      .findUnique({
        where: { id: parentId },
      })
      .album();
  }

  async getPhoto(parentId: string): Promise<PrismaPhoto | null> {
    return this.prisma.albumPhoto
      .findUnique({
        where: { id: parentId },
      })
      .photo();
  }
}
