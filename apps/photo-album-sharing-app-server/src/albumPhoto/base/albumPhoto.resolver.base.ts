/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AlbumPhoto } from "./AlbumPhoto";
import { AlbumPhotoCountArgs } from "./AlbumPhotoCountArgs";
import { AlbumPhotoFindManyArgs } from "./AlbumPhotoFindManyArgs";
import { AlbumPhotoFindUniqueArgs } from "./AlbumPhotoFindUniqueArgs";
import { CreateAlbumPhotoArgs } from "./CreateAlbumPhotoArgs";
import { UpdateAlbumPhotoArgs } from "./UpdateAlbumPhotoArgs";
import { DeleteAlbumPhotoArgs } from "./DeleteAlbumPhotoArgs";
import { Album } from "../../album/base/Album";
import { Photo } from "../../photo/base/Photo";
import { AlbumPhotoService } from "../albumPhoto.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => AlbumPhoto)
export class AlbumPhotoResolverBase {
  constructor(
    protected readonly service: AlbumPhotoService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "AlbumPhoto",
    action: "read",
    possession: "any",
  })
  async _albumPhotosMeta(
    @graphql.Args() args: AlbumPhotoCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [AlbumPhoto])
  @nestAccessControl.UseRoles({
    resource: "AlbumPhoto",
    action: "read",
    possession: "any",
  })
  async albumPhotos(
    @graphql.Args() args: AlbumPhotoFindManyArgs
  ): Promise<AlbumPhoto[]> {
    return this.service.albumPhotos(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => AlbumPhoto, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AlbumPhoto",
    action: "read",
    possession: "own",
  })
  async albumPhoto(
    @graphql.Args() args: AlbumPhotoFindUniqueArgs
  ): Promise<AlbumPhoto | null> {
    const result = await this.service.albumPhoto(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AlbumPhoto)
  @nestAccessControl.UseRoles({
    resource: "AlbumPhoto",
    action: "create",
    possession: "any",
  })
  async createAlbumPhoto(
    @graphql.Args() args: CreateAlbumPhotoArgs
  ): Promise<AlbumPhoto> {
    return await this.service.createAlbumPhoto({
      ...args,
      data: {
        ...args.data,

        album: args.data.album
          ? {
              connect: args.data.album,
            }
          : undefined,

        photo: args.data.photo
          ? {
              connect: args.data.photo,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AlbumPhoto)
  @nestAccessControl.UseRoles({
    resource: "AlbumPhoto",
    action: "update",
    possession: "any",
  })
  async updateAlbumPhoto(
    @graphql.Args() args: UpdateAlbumPhotoArgs
  ): Promise<AlbumPhoto | null> {
    try {
      return await this.service.updateAlbumPhoto({
        ...args,
        data: {
          ...args.data,

          album: args.data.album
            ? {
                connect: args.data.album,
              }
            : undefined,

          photo: args.data.photo
            ? {
                connect: args.data.photo,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AlbumPhoto)
  @nestAccessControl.UseRoles({
    resource: "AlbumPhoto",
    action: "delete",
    possession: "any",
  })
  async deleteAlbumPhoto(
    @graphql.Args() args: DeleteAlbumPhotoArgs
  ): Promise<AlbumPhoto | null> {
    try {
      return await this.service.deleteAlbumPhoto(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Album, {
    nullable: true,
    name: "album",
  })
  @nestAccessControl.UseRoles({
    resource: "Album",
    action: "read",
    possession: "any",
  })
  async getAlbum(@graphql.Parent() parent: AlbumPhoto): Promise<Album | null> {
    const result = await this.service.getAlbum(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Photo, {
    nullable: true,
    name: "photo",
  })
  @nestAccessControl.UseRoles({
    resource: "Photo",
    action: "read",
    possession: "any",
  })
  async getPhoto(@graphql.Parent() parent: AlbumPhoto): Promise<Photo | null> {
    const result = await this.service.getPhoto(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
