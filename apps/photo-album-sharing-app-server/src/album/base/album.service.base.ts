/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Album as PrismaAlbum,
  UserAlbum as PrismaUserAlbum,
  AlbumPhoto as PrismaAlbumPhoto,
} from "@prisma/client";

import { LocalStorageService } from "src/storage/providers/local/local.storage.service";
import { InputJsonValue } from "src/types";
import { FileDownload, FileUpload } from "src/storage/base/storage.types";
import { LocalStorageFile } from "src/storage/providers/local/local.storage.types";

export class AlbumServiceBase {
  constructor(
    protected readonly prisma: PrismaService,
    protected readonly localStorageService: LocalStorageService
  ) {}

  async count(args: Omit<Prisma.AlbumCountArgs, "select">): Promise<number> {
    return this.prisma.album.count(args);
  }

  async albums(args: Prisma.AlbumFindManyArgs): Promise<PrismaAlbum[]> {
    return this.prisma.album.findMany(args);
  }
  async album(args: Prisma.AlbumFindUniqueArgs): Promise<PrismaAlbum | null> {
    return this.prisma.album.findUnique(args);
  }
  async createAlbum(args: Prisma.AlbumCreateArgs): Promise<PrismaAlbum> {
    return this.prisma.album.create(args);
  }
  async updateAlbum(args: Prisma.AlbumUpdateArgs): Promise<PrismaAlbum> {
    return this.prisma.album.update(args);
  }
  async deleteAlbum(args: Prisma.AlbumDeleteArgs): Promise<PrismaAlbum> {
    return this.prisma.album.delete(args);
  }

  async uploadCoverPhoto<T extends Prisma.AlbumFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AlbumFindUniqueArgs>,
    file: FileUpload
  ): Promise<PrismaAlbum> {
    file.filename = `profilePicture-${args.where.id}.${file.filename
      .split(".")
      .pop()}`;
    const containerPath = "coverPhoto";
    const coverPhoto = await this.localStorageService.uploadFile(
      file,
      [],
      1000000,
      containerPath
    );

    return await this.prisma.album.update({
      where: args.where,

      data: {
        coverPhoto: coverPhoto as InputJsonValue,
      },
    });
  }

  async downloadCoverPhoto<T extends Prisma.AlbumFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AlbumFindUniqueArgs>
  ): Promise<FileDownload> {
    const { coverPhoto } = await this.prisma.album.findUniqueOrThrow({
      where: args.where,
    });

    return await this.localStorageService.downloadFile(
      coverPhoto as unknown as LocalStorageFile
    );
  }

  async deleteCoverPhoto<T extends Prisma.AlbumFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AlbumFindUniqueArgs>
  ): Promise<PrismaAlbum> {
    const { coverPhoto } = await this.prisma.album.findUniqueOrThrow({
      where: args.where,
    });

    await this.localStorageService.deleteFile(
      coverPhoto as unknown as LocalStorageFile
    );

    return await this.prisma.album.update({
      where: args.where,

      data: {
        coverPhoto: Prisma.DbNull,
      },
    });
  }

  async findUserAlbums(
    parentId: string,
    args: Prisma.UserAlbumFindManyArgs
  ): Promise<PrismaUserAlbum[]> {
    return this.prisma.album
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .userAlbums(args);
  }

  async findAlbumPhotos(
    parentId: string,
    args: Prisma.AlbumPhotoFindManyArgs
  ): Promise<PrismaAlbumPhoto[]> {
    return this.prisma.album
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .albumPhotos(args);
  }
}
