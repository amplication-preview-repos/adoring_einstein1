/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request, Response } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { FileInterceptor } from "@nestjs/platform-express";
import { AlbumService } from "../album.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AlbumCreateInput } from "./AlbumCreateInput";
import { Album } from "./Album";
import { AlbumFindManyArgs } from "./AlbumFindManyArgs";
import { AlbumWhereUniqueInput } from "./AlbumWhereUniqueInput";
import { AlbumUpdateInput } from "./AlbumUpdateInput";
import { UserAlbumFindManyArgs } from "../../userAlbum/base/UserAlbumFindManyArgs";
import { UserAlbum } from "../../userAlbum/base/UserAlbum";
import { UserAlbumWhereUniqueInput } from "../../userAlbum/base/UserAlbumWhereUniqueInput";
import { AlbumPhotoFindManyArgs } from "../../albumPhoto/base/AlbumPhotoFindManyArgs";
import { AlbumPhoto } from "../../albumPhoto/base/AlbumPhoto";
import { AlbumPhotoWhereUniqueInput } from "../../albumPhoto/base/AlbumPhotoWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class AlbumControllerBase {
  constructor(
    protected readonly service: AlbumService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Album })
  @nestAccessControl.UseRoles({
    resource: "Album",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createAlbum(@common.Body() data: AlbumCreateInput): Promise<Album> {
    return await this.service.createAlbum({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,
        coverPhoto: true,
        title: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Album] })
  @ApiNestedQuery(AlbumFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Album",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async albums(@common.Req() request: Request): Promise<Album[]> {
    const args = plainToClass(AlbumFindManyArgs, request.query);
    return this.service.albums({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,
        coverPhoto: true,
        title: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Album })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Album",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async album(
    @common.Param() params: AlbumWhereUniqueInput
  ): Promise<Album | null> {
    const result = await this.service.album({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,
        coverPhoto: true,
        title: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Album })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Album",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateAlbum(
    @common.Param() params: AlbumWhereUniqueInput,
    @common.Body() data: AlbumUpdateInput
  ): Promise<Album | null> {
    try {
      return await this.service.updateAlbum({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          description: true,
          coverPhoto: true,
          title: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Album })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Album",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteAlbum(
    @common.Param() params: AlbumWhereUniqueInput
  ): Promise<Album | null> {
    try {
      return await this.service.deleteAlbum({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          description: true,
          coverPhoto: true,
          title: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Put(":id/coverPhoto")
  @common.UseInterceptors(FileInterceptor("file"))
  @swagger.ApiConsumes("multipart/form-data")
  @swagger.ApiBody({
    schema: {
      type: "object",

      properties: {
        file: {
          type: "string",
          format: "binary",
        },
      },
    },
  })
  @swagger.ApiParam({
    name: "id",
    type: "string",
    required: true,
  })
  @swagger.ApiCreatedResponse({
    type: Album,
    status: "2XX",
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  async uploadCoverPhoto(
    @common.Param()
    params: AlbumWhereUniqueInput,
    @common.UploadedFile()
    file: Express.Multer.File
  ): Promise<Album> {
    return this.service.uploadCoverPhoto(
      {
        where: params,
      },
      Object.assign(file, {
        filename: file.originalname,
      })
    );
  }

  @common.Get(":id/coverPhoto")
  @swagger.ApiParam({
    name: "id",
    type: "string",
    required: true,
  })
  @swagger.ApiOkResponse({
    type: common.StreamableFile,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  async downloadCoverPhoto(
    @common.Param()
    params: AlbumWhereUniqueInput,
    @common.Res({
      passthrough: true,
    })
    res: Response
  ): Promise<common.StreamableFile> {
    const result = await this.service.downloadCoverPhoto({
      where: params,
    });

    if (result === null) {
      throw new errors.NotFoundException(
        "No resource was found for ",
        JSON.stringify(params)
      );
    }

    res.setHeader(
      "Content-Disposition",
      `attachment; filename=${result.filename}`
    );
    res.setHeader("Content-Type", result.mimetype);
    return result.stream;
  }

  @common.Delete(":id/coverPhoto")
  @swagger.ApiOkResponse({
    type: Album,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  async deleteCoverPhoto(
    @common.Param()
    params: AlbumWhereUniqueInput
  ): Promise<Album> {
    return this.service.deleteCoverPhoto({
      where: params,
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/userAlbums")
  @ApiNestedQuery(UserAlbumFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "UserAlbum",
    action: "read",
    possession: "any",
  })
  async findUserAlbums(
    @common.Req() request: Request,
    @common.Param() params: AlbumWhereUniqueInput
  ): Promise<UserAlbum[]> {
    const query = plainToClass(UserAlbumFindManyArgs, request.query);
    const results = await this.service.findUserAlbums(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },

        album: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/userAlbums")
  @nestAccessControl.UseRoles({
    resource: "Album",
    action: "update",
    possession: "any",
  })
  async connectUserAlbums(
    @common.Param() params: AlbumWhereUniqueInput,
    @common.Body() body: UserAlbumWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userAlbums: {
        connect: body,
      },
    };
    await this.service.updateAlbum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/userAlbums")
  @nestAccessControl.UseRoles({
    resource: "Album",
    action: "update",
    possession: "any",
  })
  async updateUserAlbums(
    @common.Param() params: AlbumWhereUniqueInput,
    @common.Body() body: UserAlbumWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userAlbums: {
        set: body,
      },
    };
    await this.service.updateAlbum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/userAlbums")
  @nestAccessControl.UseRoles({
    resource: "Album",
    action: "update",
    possession: "any",
  })
  async disconnectUserAlbums(
    @common.Param() params: AlbumWhereUniqueInput,
    @common.Body() body: UserAlbumWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userAlbums: {
        disconnect: body,
      },
    };
    await this.service.updateAlbum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/albumPhotos")
  @ApiNestedQuery(AlbumPhotoFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "AlbumPhoto",
    action: "read",
    possession: "any",
  })
  async findAlbumPhotos(
    @common.Req() request: Request,
    @common.Param() params: AlbumWhereUniqueInput
  ): Promise<AlbumPhoto[]> {
    const query = plainToClass(AlbumPhotoFindManyArgs, request.query);
    const results = await this.service.findAlbumPhotos(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        album: {
          select: {
            id: true,
          },
        },

        photo: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/albumPhotos")
  @nestAccessControl.UseRoles({
    resource: "Album",
    action: "update",
    possession: "any",
  })
  async connectAlbumPhotos(
    @common.Param() params: AlbumWhereUniqueInput,
    @common.Body() body: AlbumPhotoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      albumPhotos: {
        connect: body,
      },
    };
    await this.service.updateAlbum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/albumPhotos")
  @nestAccessControl.UseRoles({
    resource: "Album",
    action: "update",
    possession: "any",
  })
  async updateAlbumPhotos(
    @common.Param() params: AlbumWhereUniqueInput,
    @common.Body() body: AlbumPhotoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      albumPhotos: {
        set: body,
      },
    };
    await this.service.updateAlbum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/albumPhotos")
  @nestAccessControl.UseRoles({
    resource: "Album",
    action: "update",
    possession: "any",
  })
  async disconnectAlbumPhotos(
    @common.Param() params: AlbumWhereUniqueInput,
    @common.Body() body: AlbumPhotoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      albumPhotos: {
        disconnect: body,
      },
    };
    await this.service.updateAlbum({
      where: params,
      data,
      select: { id: true },
    });
  }
}
