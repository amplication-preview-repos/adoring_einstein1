/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { PlaylistPhoto } from "./PlaylistPhoto";
import { PlaylistPhotoCountArgs } from "./PlaylistPhotoCountArgs";
import { PlaylistPhotoFindManyArgs } from "./PlaylistPhotoFindManyArgs";
import { PlaylistPhotoFindUniqueArgs } from "./PlaylistPhotoFindUniqueArgs";
import { CreatePlaylistPhotoArgs } from "./CreatePlaylistPhotoArgs";
import { UpdatePlaylistPhotoArgs } from "./UpdatePlaylistPhotoArgs";
import { DeletePlaylistPhotoArgs } from "./DeletePlaylistPhotoArgs";
import { Playlist } from "../../playlist/base/Playlist";
import { Photo } from "../../photo/base/Photo";
import { PlaylistPhotoService } from "../playlistPhoto.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PlaylistPhoto)
export class PlaylistPhotoResolverBase {
  constructor(
    protected readonly service: PlaylistPhotoService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PlaylistPhoto",
    action: "read",
    possession: "any",
  })
  async _playlistPhotosMeta(
    @graphql.Args() args: PlaylistPhotoCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PlaylistPhoto])
  @nestAccessControl.UseRoles({
    resource: "PlaylistPhoto",
    action: "read",
    possession: "any",
  })
  async playlistPhotos(
    @graphql.Args() args: PlaylistPhotoFindManyArgs
  ): Promise<PlaylistPhoto[]> {
    return this.service.playlistPhotos(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PlaylistPhoto, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PlaylistPhoto",
    action: "read",
    possession: "own",
  })
  async playlistPhoto(
    @graphql.Args() args: PlaylistPhotoFindUniqueArgs
  ): Promise<PlaylistPhoto | null> {
    const result = await this.service.playlistPhoto(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PlaylistPhoto)
  @nestAccessControl.UseRoles({
    resource: "PlaylistPhoto",
    action: "create",
    possession: "any",
  })
  async createPlaylistPhoto(
    @graphql.Args() args: CreatePlaylistPhotoArgs
  ): Promise<PlaylistPhoto> {
    return await this.service.createPlaylistPhoto({
      ...args,
      data: {
        ...args.data,

        playlist: args.data.playlist
          ? {
              connect: args.data.playlist,
            }
          : undefined,

        photo: args.data.photo
          ? {
              connect: args.data.photo,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PlaylistPhoto)
  @nestAccessControl.UseRoles({
    resource: "PlaylistPhoto",
    action: "update",
    possession: "any",
  })
  async updatePlaylistPhoto(
    @graphql.Args() args: UpdatePlaylistPhotoArgs
  ): Promise<PlaylistPhoto | null> {
    try {
      return await this.service.updatePlaylistPhoto({
        ...args,
        data: {
          ...args.data,

          playlist: args.data.playlist
            ? {
                connect: args.data.playlist,
              }
            : undefined,

          photo: args.data.photo
            ? {
                connect: args.data.photo,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PlaylistPhoto)
  @nestAccessControl.UseRoles({
    resource: "PlaylistPhoto",
    action: "delete",
    possession: "any",
  })
  async deletePlaylistPhoto(
    @graphql.Args() args: DeletePlaylistPhotoArgs
  ): Promise<PlaylistPhoto | null> {
    try {
      return await this.service.deletePlaylistPhoto(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Playlist, {
    nullable: true,
    name: "playlist",
  })
  @nestAccessControl.UseRoles({
    resource: "Playlist",
    action: "read",
    possession: "any",
  })
  async getPlaylist(
    @graphql.Parent() parent: PlaylistPhoto
  ): Promise<Playlist | null> {
    const result = await this.service.getPlaylist(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Photo, {
    nullable: true,
    name: "photo",
  })
  @nestAccessControl.UseRoles({
    resource: "Photo",
    action: "read",
    possession: "any",
  })
  async getPhoto(
    @graphql.Parent() parent: PlaylistPhoto
  ): Promise<Photo | null> {
    const result = await this.service.getPhoto(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
