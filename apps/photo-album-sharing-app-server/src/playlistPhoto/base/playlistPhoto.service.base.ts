/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  PlaylistPhoto as PrismaPlaylistPhoto,
  Playlist as PrismaPlaylist,
  Photo as PrismaPhoto,
} from "@prisma/client";

export class PlaylistPhotoServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PlaylistPhotoCountArgs, "select">
  ): Promise<number> {
    return this.prisma.playlistPhoto.count(args);
  }

  async playlistPhotos(
    args: Prisma.PlaylistPhotoFindManyArgs
  ): Promise<PrismaPlaylistPhoto[]> {
    return this.prisma.playlistPhoto.findMany(args);
  }
  async playlistPhoto(
    args: Prisma.PlaylistPhotoFindUniqueArgs
  ): Promise<PrismaPlaylistPhoto | null> {
    return this.prisma.playlistPhoto.findUnique(args);
  }
  async createPlaylistPhoto(
    args: Prisma.PlaylistPhotoCreateArgs
  ): Promise<PrismaPlaylistPhoto> {
    return this.prisma.playlistPhoto.create(args);
  }
  async updatePlaylistPhoto(
    args: Prisma.PlaylistPhotoUpdateArgs
  ): Promise<PrismaPlaylistPhoto> {
    return this.prisma.playlistPhoto.update(args);
  }
  async deletePlaylistPhoto(
    args: Prisma.PlaylistPhotoDeleteArgs
  ): Promise<PrismaPlaylistPhoto> {
    return this.prisma.playlistPhoto.delete(args);
  }

  async getPlaylist(parentId: string): Promise<PrismaPlaylist | null> {
    return this.prisma.playlistPhoto
      .findUnique({
        where: { id: parentId },
      })
      .playlist();
  }

  async getPhoto(parentId: string): Promise<PrismaPhoto | null> {
    return this.prisma.playlistPhoto
      .findUnique({
        where: { id: parentId },
      })
      .photo();
  }
}
