/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  UserAlbum as PrismaUserAlbum,
  User as PrismaUser,
  Album as PrismaAlbum,
} from "@prisma/client";

export class UserAlbumServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.UserAlbumCountArgs, "select">
  ): Promise<number> {
    return this.prisma.userAlbum.count(args);
  }

  async userAlbums(
    args: Prisma.UserAlbumFindManyArgs
  ): Promise<PrismaUserAlbum[]> {
    return this.prisma.userAlbum.findMany(args);
  }
  async userAlbum(
    args: Prisma.UserAlbumFindUniqueArgs
  ): Promise<PrismaUserAlbum | null> {
    return this.prisma.userAlbum.findUnique(args);
  }
  async createUserAlbum(
    args: Prisma.UserAlbumCreateArgs
  ): Promise<PrismaUserAlbum> {
    return this.prisma.userAlbum.create(args);
  }
  async updateUserAlbum(
    args: Prisma.UserAlbumUpdateArgs
  ): Promise<PrismaUserAlbum> {
    return this.prisma.userAlbum.update(args);
  }
  async deleteUserAlbum(
    args: Prisma.UserAlbumDeleteArgs
  ): Promise<PrismaUserAlbum> {
    return this.prisma.userAlbum.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.userAlbum
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }

  async getAlbum(parentId: string): Promise<PrismaAlbum | null> {
    return this.prisma.userAlbum
      .findUnique({
        where: { id: parentId },
      })
      .album();
  }
}
