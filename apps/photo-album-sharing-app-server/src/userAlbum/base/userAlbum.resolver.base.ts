/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { UserAlbum } from "./UserAlbum";
import { UserAlbumCountArgs } from "./UserAlbumCountArgs";
import { UserAlbumFindManyArgs } from "./UserAlbumFindManyArgs";
import { UserAlbumFindUniqueArgs } from "./UserAlbumFindUniqueArgs";
import { CreateUserAlbumArgs } from "./CreateUserAlbumArgs";
import { UpdateUserAlbumArgs } from "./UpdateUserAlbumArgs";
import { DeleteUserAlbumArgs } from "./DeleteUserAlbumArgs";
import { User } from "../../user/base/User";
import { Album } from "../../album/base/Album";
import { UserAlbumService } from "../userAlbum.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => UserAlbum)
export class UserAlbumResolverBase {
  constructor(
    protected readonly service: UserAlbumService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "UserAlbum",
    action: "read",
    possession: "any",
  })
  async _userAlbumsMeta(
    @graphql.Args() args: UserAlbumCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [UserAlbum])
  @nestAccessControl.UseRoles({
    resource: "UserAlbum",
    action: "read",
    possession: "any",
  })
  async userAlbums(
    @graphql.Args() args: UserAlbumFindManyArgs
  ): Promise<UserAlbum[]> {
    return this.service.userAlbums(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => UserAlbum, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "UserAlbum",
    action: "read",
    possession: "own",
  })
  async userAlbum(
    @graphql.Args() args: UserAlbumFindUniqueArgs
  ): Promise<UserAlbum | null> {
    const result = await this.service.userAlbum(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserAlbum)
  @nestAccessControl.UseRoles({
    resource: "UserAlbum",
    action: "create",
    possession: "any",
  })
  async createUserAlbum(
    @graphql.Args() args: CreateUserAlbumArgs
  ): Promise<UserAlbum> {
    return await this.service.createUserAlbum({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,

        album: args.data.album
          ? {
              connect: args.data.album,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserAlbum)
  @nestAccessControl.UseRoles({
    resource: "UserAlbum",
    action: "update",
    possession: "any",
  })
  async updateUserAlbum(
    @graphql.Args() args: UpdateUserAlbumArgs
  ): Promise<UserAlbum | null> {
    try {
      return await this.service.updateUserAlbum({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,

          album: args.data.album
            ? {
                connect: args.data.album,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserAlbum)
  @nestAccessControl.UseRoles({
    resource: "UserAlbum",
    action: "delete",
    possession: "any",
  })
  async deleteUserAlbum(
    @graphql.Args() args: DeleteUserAlbumArgs
  ): Promise<UserAlbum | null> {
    try {
      return await this.service.deleteUserAlbum(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: UserAlbum): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Album, {
    nullable: true,
    name: "album",
  })
  @nestAccessControl.UseRoles({
    resource: "Album",
    action: "read",
    possession: "any",
  })
  async getAlbum(@graphql.Parent() parent: UserAlbum): Promise<Album | null> {
    const result = await this.service.getAlbum(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
